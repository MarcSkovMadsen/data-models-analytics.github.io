<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Data, Models and Analytics Blog</title><link href="https://datamodelsanalytics.com/blog/" rel="alternate"></link><link href="https://datamodelsanalytics.com/blog%5Cfeeds/all.atom.xml" rel="self"></link><id>https://datamodelsanalytics.com/blog/</id><updated>2019-09-05T06:01:00+02:00</updated><subtitle>By Marc Skov Madsen, PhD (Math), CFA®, Lead Data Scientist Developer at Ørsted</subtitle><entry><title>How I use Invoke to structure and document my DevOps process</title><link href="https://datamodelsanalytics.com/blog%5Cposts/how-i-use-invoke-for-devops.html" rel="alternate"></link><published>2019-09-05T06:01:00+02:00</published><updated>2019-09-05T06:01:00+02:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2019-09-05:/blog\posts/how-i-use-invoke-for-devops.html</id><summary type="html">&lt;p class="first last"&gt;An article on how I use Invoke to structure and document my DevOps process&lt;/p&gt;
</summary><content type="html">&lt;p&gt;There are many ways to structure and document your DevOps process. A fundamental component of my DevOps process is a robust command line interface. My preferred way of building a command line interface is using the Python Package called &lt;a class="reference external" href="http://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Invoke provides me with a &lt;strong&gt;--list&lt;/strong&gt; of available commands&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Use Invoke --list to list the available command" src="../images/invoke-list.png" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Invoke also provides me with additional &lt;strong&gt;--help&lt;/strong&gt; text&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Use Invoke --help to get help text" src="../images/invoke-help.png" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;p&gt;In order to get the above command line interface I just need to define Python functions with docstrings and mark them with the Invoke &amp;#64;task annotation.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Invoke tasks are created using the &amp;#64;task annotation" src="../images/invoke-task-annotation.png" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;p&gt;Some reasons to use Invoke as your CLI framework are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Configuration management through use of environment variables, arguments, and config files&lt;/li&gt;
&lt;li&gt;Automatic help menus and argument parsing with validation&lt;/li&gt;
&lt;li&gt;Tasks can be run from any directory under the project root&lt;/li&gt;
&lt;li&gt;Invoke and Python can be more easily used in a cross-platform environment&lt;/li&gt;
&lt;li&gt;Easier debugging using the Python debugger and more flexible printing&lt;/li&gt;
&lt;li&gt;Python is more widely known and understood among developers&lt;/li&gt;
&lt;li&gt;Python gives access to a wide variety of packages to use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can even use the command directly from the command palette in VS Code using the &lt;a class="reference external" href="https://marketplace.visualstudio.com/items?itemName=dchanco.vsc-invoke"&gt;VS Code Invoke Extension&lt;/a&gt;&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Using Invoke in VS Code via the command palette" src="../images/invoke-vscode.png" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;p&gt;For an example of using Invoke (and why not to use Make) see this &lt;a class="reference external" href="https://interrupt.memfault.com/blog/building-a-cli-for-firmware-projects#why-invoke-and-Python"&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Invoke is very, very powerfull and robust. For the full details see &lt;a class="reference external" href="http://www.pyinvoke.org/"&gt;http://www.pyinvoke.org/&lt;/a&gt;.&lt;/p&gt;
</content><category term="DevOps"></category><category term="Invoke"></category><category term="Python"></category></entry><entry><title>I don't use PipEnv because...</title><link href="https://datamodelsanalytics.com/blog%5Cposts/i-dont-use-pipenv.html" rel="alternate"></link><published>2019-03-01T06:01:00+01:00</published><updated>2019-04-27T08:00:00+02:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2019-03-01:/blog\posts/i-dont-use-pipenv.html</id><summary type="html">&lt;p class="first last"&gt;I don't use PipEnv because it's slow, does not work well with Black and does not support more than two environments.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I don't use PipEnv because&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I get an error when I install black&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install black
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's slower than the using&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pip install &amp;lt;package&amp;gt;&lt;/li&gt;
&lt;li&gt;Pip show &amp;lt;package&amp;gt;&lt;/li&gt;
&lt;li&gt;Manually updating the requirements.txt file with '&amp;lt;package&amp;gt;==&amp;lt;version&amp;gt;'&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PipEnv"></category></entry><entry><title>I don't use Tableau because...</title><link href="https://datamodelsanalytics.com/blog%5Cposts/i-dont-use-tableau.html" rel="alternate"></link><published>2018-12-23T00:00:00+01:00</published><updated>2019-04-27T00:00:00+02:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2018-12-23:/blog\posts/i-dont-use-tableau.html</id><summary type="html">&lt;p class="first last"&gt;Tableau can do amazing things but i've decided to avoid using it unless i'm in a hurry because I always end up having problems documenting, testing, refactoring and further developing.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm currently considering moving away from using Tableau as my front end dash board technology. I've been using it for the last 4 years.&lt;/p&gt;
&lt;p&gt;I'm very happy about the rapid development of impressive dashboards on almost any numerical data source but&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;The possible layout of my dashboard very much depend on how my data source is structured&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;I'm very unhappy about sometimes meeting a wall where you just can't do what you find out is required after some iterations of the dashboard. At least not without starting all over again re-building the data source and redesigning the dashboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;I cannot build components that are tested, documented and reusable&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Currently i'm only able to do manual testing. Thus when ever I change something I have to manually test all over again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;I cannot efficiently do my ETL in Python and serve it via a REST API.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;I most often end up in preparing the data source in MSSQL or directly in Tableau and this is costly to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="evaluation"&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;For me the current alternative is web development in Django + Angular + Plotly&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="49%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Item&lt;/th&gt;
&lt;th class="head"&gt;Tableau&lt;/th&gt;
&lt;th class="head"&gt;Django + Angular + Plotly&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Development&lt;/td&gt;
&lt;td&gt;Fast but not fully customizable&lt;/td&gt;
&lt;td&gt;Slow but fully customizable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Developers&lt;/td&gt;
&lt;td&gt;Not Satisfactory - Cannot use Python Data Scientists&lt;/td&gt;
&lt;td&gt;Satisfactory - Can use Python Data Scientists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Documentation&lt;/td&gt;
&lt;td&gt;Not Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Test&lt;/td&gt;
&lt;td&gt;Not Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Operation&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Maintenance&lt;/td&gt;
&lt;td&gt;Not Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cost&lt;/td&gt;
&lt;td&gt;High annual license costs&lt;/td&gt;
&lt;td&gt;No license costs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Tableau"></category></entry><entry><title>My Notes on State Management with NGXS</title><link href="https://datamodelsanalytics.com/blog%5Cposts/state-management-with-ngxs.html" rel="alternate"></link><published>2018-03-01T00:00:00+01:00</published><updated>2018-03-01T00:00:00+01:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2018-03-01:/blog\posts/state-management-with-ngxs.html</id><summary type="html">&lt;p&gt;A colleague suggested I learn and use state management in Angular. These notes documents the steps and learnings.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A colleague suggested I learn state management in Angular using either &lt;a href="https://github.com/ngxs/store"&gt;NGXS&lt;/a&gt; or &lt;a href="https://ngrx.io/"&gt;NGRX&lt;/a&gt;. He recommended NGXS over NGRX as it seems to be better integrated with Angular.&lt;/p&gt;
&lt;p&gt;These notes documents the steps and learnings.&lt;/p&gt;
&lt;h2&gt;State is really just data&lt;/h2&gt;
&lt;p&gt;A typical web application has the following six types of state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server state&lt;/li&gt;
&lt;li&gt;Persistent state (subset of the server state stored on the client, in memory)&lt;/li&gt;
&lt;li&gt;The URL and router state&lt;/li&gt;
&lt;li&gt;Client state (client state equal to URL and router state)&lt;/li&gt;
&lt;li&gt;Transient client state (client state not in URL)&lt;/li&gt;
&lt;li&gt;Local UI state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my head I visualize the above as sets.&lt;/p&gt;
&lt;p&gt;The architecture of state can be shown as&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/1600/0*I3jAfhOZPcF1Mjil." alt="state architecture" width="600"/&gt;&lt;/p&gt;
&lt;h2&gt;This is how ngx state management works&lt;/h2&gt;
&lt;p&gt;The architecture of the ngxs state management can be shown as&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-L9CoGJCq3UCfKJ7RCUg%2F-LZoLccbzvZjhcgtrQ0z%2F-LZoLea7ZgBJTqq73TVX%2Fdiagram.png?generation=1551361553530490&amp;alt=media" alt="state architecture" width="600"/&gt;&lt;/p&gt;
&lt;p&gt;Some important definitions are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;States&lt;/em&gt; are classes that define a state container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Action types&lt;/em&gt; should contain three parts '[Context] verb Entity'. For example '[Zoo] feed Panda'&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Actions are normally dispatched from container components such as router pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Events&lt;/em&gt; are actions that have already happened and we now need to react to them.&lt;/li&gt;
&lt;li&gt;In computing and telecommunications, the &lt;em&gt;payload&lt;/em&gt; is the part of transmitted data that is the actual intended message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ahh. Let's play with our first example&lt;/h2&gt;
&lt;p&gt;This example is based on &lt;a href="https://appdividend.com/2018/07/03/angular-ngxs-tutorial-with-example-from-scratch/"&gt;Angular NGXS Tutorial With Example From Scratch&lt;/a&gt;. I needed to combine with &lt;a href="https://ngxs.gitbook.io/ngxs/getting-started/installation"&gt;Installation of ngxs.store&lt;/a&gt; for the installation.&lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ng new ng6xs
&lt;span class="nb"&gt;cd&lt;/span&gt; ng6xs/
npm install @ngxs/store --save
npm install @ngxs/logger-plugin --save --dev
npm install @ngxs/devtools-plugin --save --dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then tried to serve but got an error. I solved it by updating to "rxjs": "6.3.3" in package.json. See &lt;a href="https://github.com/MarkPieszak/aspnetcore-angular-universal/issues/714"&gt;Issue&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ng serve -o
ng g c components/create --spec&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
ng g c components/index --spec&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
npm install bootstrap --save
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works like it should&lt;/p&gt;
&lt;p&gt;&lt;img src="https://appdividend.com/wp-content/uploads/2018/07/Angular-State-Management-Pattern.png" alt="state architecture" width="600"/&gt;&lt;/p&gt;
&lt;h2&gt;Quick question for my colleague&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I only see the Store imported in create.component.ts. Shouldn't it be imported and provided in the app.module.ts? Yes. But its imported and provided by&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgxsModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@ngxs/store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;NgxsModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="nx"&gt;UserState&lt;/span&gt;
    &lt;span class="p"&gt;]),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My colleague further more recommended to use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en-US"&gt;redux-devtools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ngxs router plugin&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@azure/msal-angular"&gt;microsoft angular plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and to study&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/finiteloop-systems/architect-design-build-scalable-angular-applications-ce336a3c153a"&gt;Architect, design &amp;amp; build scalable Angular applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://medium.com/@ramandeep.singh.1983/project-structure-for-modern-angular-applications-d00036c9e1ee&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A second, more advanced example&lt;/h2&gt;
&lt;p&gt;https://github.com/tommythongnguyen/Ngxs-Pizza-Order&lt;/p&gt;
&lt;h2&gt;Questions for my colleague&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Why does 'schematics' create a XYZStateModule? In the style guide they don't mention StateModule. I would think they should be called XYZState.&lt;/li&gt;
&lt;li&gt;How do I create a 'StateModel that extends Array&lt;Model&gt;' so that I can refer to my list of Models as&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;state.models instead of state.XYZStateModule.models&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How do I update state of individual model install of state of array of models. It seems costly to me to update state of list of array in stead of individual array.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://medium.com/finiteloop-systems/architect-design-build-scalable-angular-applications-ce336a3c153a&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.angularindepth.com/container-components-with-angular-11e4200f8df"&gt;container-components-with-angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Angular"></category><category term="NGXS"></category><category term="State Management"></category></entry></feed>