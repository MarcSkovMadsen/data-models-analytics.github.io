<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Data, Models and Analytics Blog</title><link href="https://datamodelsanalytics.com/blog/" rel="alternate"></link><link href="https://datamodelsanalytics.com/blog%5Cfeeds/all.atom.xml" rel="self"></link><id>https://datamodelsanalytics.com/blog/</id><updated>2019-05-07T06:01:00+02:00</updated><subtitle>By Marc Skov Madsen, PhD (Math), CFA®, Lead Data Scientist Developer at Ørsted</subtitle><entry><title>The best toolset for interactive analytics?</title><link href="https://datamodelsanalytics.com/blog%5Cposts/best-toolset-for-interactive-analytics.html" rel="alternate"></link><published>2019-05-07T06:01:00+02:00</published><updated>2019-05-07T06:01:00+02:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2019-05-07:/blog\posts/best-toolset-for-interactive-analytics.html</id><summary type="html">&lt;p class="first last"&gt;What's the best toolset for developing interactive analytics and data visualization?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm creating interactive analytics and data visualizations for my users all the time. And I'm a bit frustrated as &lt;strong&gt;my current toolsets are not efficient&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://dash-gallery.plotly.host/dash-manufacture-spc-dashboard/"&gt;&lt;img alt="Dash manufactoring dashboard example" src="../images/dash-manufactoring.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Currently I have too supported toolsets to choose from.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BI Tools like Power BI and Tableau&lt;/li&gt;
&lt;li&gt;Frontend web development using Angular&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both are impressive&amp;nbsp;technologies with a lot of pros.&amp;nbsp;But both keeps frustrating me over and over again because of their cons.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I need something in between&lt;/strong&gt; and I'm currently seeing Jupyter Notebooks for prototyping and Plotly Dash for production as the best &amp;quot;in between&amp;quot; solution.&lt;/p&gt;
&lt;p&gt;You can take a look at impressive dashboards using Dash in the &lt;a class="reference external" href="https://dash-gallery.plotly.host/Portal/"&gt;Dash Gallery&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="why-tableau-ends-up-frustrating-me"&gt;
&lt;h2&gt;Why Tableau ends up frustrating me.&lt;/h2&gt;
&lt;p&gt;In Tableau you can do rapid prototyping and release to production using drag and drop. But&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;since you don't get code files it often ends up being difficult to develop and maintain in the long run.&lt;/li&gt;
&lt;li&gt;you often end up just not being able to do exactly what is needed or have to use some unmaintainable &lt;em&gt;hack&lt;/em&gt; to solve the problem.&lt;/li&gt;
&lt;li&gt;Tableau is also costly in it self and yet another technology to master, so often the business analyst, data engineer and data scientist cannot work with the same technology.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Tableau dashboard example" src="../images/tableau-dashboard-example.png" style="width: 60%;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-angular-ends-up-frustrating-me"&gt;
&lt;h2&gt;Why Angular ends up frustrating me.&lt;/h2&gt;
&lt;p&gt;With Angular you have code and all the tools at hand for tests, documentation, refactoring, writing advanced models etc. But&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you end up having two stacks of tools. One for the backend and one for the front end.&lt;/li&gt;
&lt;li&gt;you have to spend a lot of time integrating and keeping the backend and front end in sync.&lt;/li&gt;
&lt;li&gt;you probably develop some of the same business logic in the two stacks.&lt;/li&gt;
&lt;li&gt;you have to spend time on customizing Angular for data visualization as it not a dedicated solution for that.&lt;/li&gt;
&lt;li&gt;your team now probably needs additional backend and front end resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The setup is now very complex and the development/ maintenance cycle is very slow.&lt;/p&gt;
&lt;p&gt;We just needed a dashboard for internal use and not a complex web application for thousands of users!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-need-something-in-between"&gt;
&lt;h2&gt;I need something in between&lt;/h2&gt;
&lt;p&gt;I need something in between with the possibility of&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Presenting data in a efficient, appealing and interactive way.&lt;/li&gt;
&lt;li&gt;Ability to integrate into web sites to combine with other technologies like Angular when it's really needed.&lt;/li&gt;
&lt;li&gt;Keep the technology stack as simple as possible as i'm not working in large teams.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Developing in Python mainly as this&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;is the common language for people working with data, models and analytics.&lt;/li&gt;
&lt;li&gt;has a vast eco-system for data analysis and visualization.&lt;/li&gt;
&lt;li&gt;A fast develop-test-build-release-maintain cycle&lt;/li&gt;
&lt;li&gt;can be refactored, structured into modules, documented, tested etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really think we could speed up our development time and do valuable stuff based on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-would-be-my-preferred-toolset"&gt;
&lt;h2&gt;What would be my preferred toolset?&lt;/h2&gt;
&lt;p&gt;My preferred toolset and workflow would be&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python for data extraction, transformation and loading.&lt;/li&gt;
&lt;li&gt;Jupyter Notebooks for rapid prototyping of Dashboards&lt;/li&gt;
&lt;li&gt;Dash for production Dashboards.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I really need something more advanced for specific use cases I could add in&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django as backend when multiple dashboards, security, admin stuff, forms, data download etc. is needed.&lt;/li&gt;
&lt;li&gt;Angular when advanced, custom front end development is really needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="" src="../images/jupyter-notebook-icon.png" style="height: 60px;" /&gt;
&lt;img alt="" src="../images/plotly-dash-icon.png" style="height: 60px;" /&gt;
&lt;img alt="" src="../images/python-django-logo.jpg" style="height: 60px;" /&gt;
&lt;img alt="" src="../images/angular-icon.png" style="height: 60px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="why-jupyter-notebooks"&gt;
&lt;h2&gt;Why Jupyter Notebooks?&lt;/h2&gt;
&lt;p&gt;A Jupyter Notebook is the common tool for data exploration and prototyping among data engineers and data scientists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-dash"&gt;
&lt;h2&gt;Why Dash?&lt;/h2&gt;
&lt;p&gt;With Dash you can develop impressive, interactive, web based dashboards in Python only. Dash creates all the frontend html, css and javascript for you. Dash is focused on rapid development on interactive visualizations.&lt;/p&gt;
&lt;p&gt;In Dash you just need to write Python functions to extract, transform and load data and they will be called automatically whenever the user interacts with your dashboard.&lt;/p&gt;
&lt;p&gt;Dash can be simple because you can develop an advanced&amp;nbsp;dashboard in just one python file if you like.&lt;/p&gt;
&lt;p&gt;Dash is a web application and can easily be deployed.&lt;/p&gt;
&lt;p&gt;Dash can be combined with for example Django backend and Angular frontend if your requirements are to build a complex application where you need REST APIs, Logins/ Security, SPAs&amp;nbsp;for some of the parts.&lt;/p&gt;
&lt;iframe width="100%" height="1100 px" src=" https://dash-gallery.plotly.host/dash-wind-streaming/" frameborder="0" allowfullscreen style="-webkit-transform:scale(1);-moz-transform-scale(1);"
&gt;&lt;/iframe&gt;&lt;p&gt;For more examples take a look at the impressive dashboards in the &lt;a class="reference external" href="https://dash-gallery.plotly.host/Portal/"&gt;Dash Gallery&lt;/a&gt; . There are links to the code as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-not-just-go-ahead"&gt;
&lt;h2&gt;Why not just go ahead&lt;/h2&gt;
&lt;p&gt;Well&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;these are not officially supported solutions and&lt;/li&gt;
&lt;li&gt;these are technologies under development with rough edges.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="interactive analytics"></category></entry><entry><title>I don't use PipEnv because...</title><link href="https://datamodelsanalytics.com/blog%5Cposts/i-dont-use-pipenv.html" rel="alternate"></link><published>2019-03-01T06:01:00+01:00</published><updated>2019-04-27T08:00:00+02:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2019-03-01:/blog\posts/i-dont-use-pipenv.html</id><summary type="html">&lt;p class="first last"&gt;I don't use PipEnv because it's slow, does not work well with Black and does not support more than two environments.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I don't use PipEnv because&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I get an error when I install black&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pipenv install black
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's slower than the using&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pip install &amp;lt;package&amp;gt;&lt;/li&gt;
&lt;li&gt;Pip show &amp;lt;package&amp;gt;&lt;/li&gt;
&lt;li&gt;Manually updating the requirements.txt file with '&amp;lt;package&amp;gt;==&amp;lt;version&amp;gt;'&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PipEnv"></category></entry><entry><title>I don't use Tableau because...</title><link href="https://datamodelsanalytics.com/blog%5Cposts/i-dont-use-tableau.html" rel="alternate"></link><published>2018-12-23T00:00:00+01:00</published><updated>2019-04-27T00:00:00+02:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2018-12-23:/blog\posts/i-dont-use-tableau.html</id><summary type="html">&lt;p class="first last"&gt;Tableau can do amazing things but i've decided to avoid using it unless i'm in a hurry because I always end up having problems documenting, testing, refactoring and further developing.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I'm currently considering moving away from using Tableau as my front end dash board technology. I've been using it for the last 4 years.&lt;/p&gt;
&lt;p&gt;I'm very happy about the rapid development of impressive dashboards on almost any numerical data source but&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;The possible layout of my dashboard very much depend on how my data source is structured&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;I'm very unhappy about sometimes meeting a wall where you just can't do what you find out is required after some iterations of the dashboard. At least not without starting all over again re-building the data source and redesigning the dashboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;I cannot build components that are tested, documented and reusable&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Currently i'm only able to do manual testing. Thus when ever I change something I have to manually test all over again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;I cannot efficiently do my ETL in Python and serve it via a REST API.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;I most often end up in preparing the data source in MSSQL or directly in Tableau and this is costly to maintain.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="evaluation"&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;For me the current alternative is web development in Django + Angular + Plotly&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="49%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Item&lt;/th&gt;
&lt;th class="head"&gt;Tableau&lt;/th&gt;
&lt;th class="head"&gt;Django + Angular + Plotly&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Development&lt;/td&gt;
&lt;td&gt;Fast but not fully customizable&lt;/td&gt;
&lt;td&gt;Slow but fully customizable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Developers&lt;/td&gt;
&lt;td&gt;Not Satisfactory - Cannot use Python Data Scientists&lt;/td&gt;
&lt;td&gt;Satisfactory - Can use Python Data Scientists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Documentation&lt;/td&gt;
&lt;td&gt;Not Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Test&lt;/td&gt;
&lt;td&gt;Not Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Operation&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Maintenance&lt;/td&gt;
&lt;td&gt;Not Satisfactory&lt;/td&gt;
&lt;td&gt;Satisfactory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cost&lt;/td&gt;
&lt;td&gt;High annual license costs&lt;/td&gt;
&lt;td&gt;No license costs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Tableau"></category></entry><entry><title>My Notes on State Management with NGXS</title><link href="https://datamodelsanalytics.com/blog%5Cposts/state-management-with-ngxs.html" rel="alternate"></link><published>2018-03-01T00:00:00+01:00</published><updated>2018-03-01T00:00:00+01:00</updated><author><name>Marc Skov Madsen</name></author><id>tag:datamodelsanalytics.com,2018-03-01:/blog\posts/state-management-with-ngxs.html</id><summary type="html">&lt;p&gt;A colleague suggested I learn and use state management in Angular. These notes documents the steps and learnings.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A colleague suggested I learn state management in Angular using either &lt;a href="https://github.com/ngxs/store"&gt;NGXS&lt;/a&gt; or &lt;a href="https://ngrx.io/"&gt;NGRX&lt;/a&gt;. He recommended NGXS over NGRX as it seems to be better integrated with Angular.&lt;/p&gt;
&lt;p&gt;These notes documents the steps and learnings.&lt;/p&gt;
&lt;h2&gt;State is really just data&lt;/h2&gt;
&lt;p&gt;A typical web application has the following six types of state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server state&lt;/li&gt;
&lt;li&gt;Persistent state (subset of the server state stored on the client, in memory)&lt;/li&gt;
&lt;li&gt;The URL and router state&lt;/li&gt;
&lt;li&gt;Client state (client state equal to URL and router state)&lt;/li&gt;
&lt;li&gt;Transient client state (client state not in URL)&lt;/li&gt;
&lt;li&gt;Local UI state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my head I visualize the above as sets.&lt;/p&gt;
&lt;p&gt;The architecture of state can be shown as&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/1600/0*I3jAfhOZPcF1Mjil." alt="state architecture" width="600"/&gt;&lt;/p&gt;
&lt;h2&gt;This is how ngx state management works&lt;/h2&gt;
&lt;p&gt;The architecture of the ngxs state management can be shown as&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-L9CoGJCq3UCfKJ7RCUg%2F-LZoLccbzvZjhcgtrQ0z%2F-LZoLea7ZgBJTqq73TVX%2Fdiagram.png?generation=1551361553530490&amp;alt=media" alt="state architecture" width="600"/&gt;&lt;/p&gt;
&lt;p&gt;Some important definitions are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;States&lt;/em&gt; are classes that define a state container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Action types&lt;/em&gt; should contain three parts '[Context] verb Entity'. For example '[Zoo] feed Panda'&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Actions are normally dispatched from container components such as router pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Events&lt;/em&gt; are actions that have already happened and we now need to react to them.&lt;/li&gt;
&lt;li&gt;In computing and telecommunications, the &lt;em&gt;payload&lt;/em&gt; is the part of transmitted data that is the actual intended message.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ahh. Let's play with our first example&lt;/h2&gt;
&lt;p&gt;This example is based on &lt;a href="https://appdividend.com/2018/07/03/angular-ngxs-tutorial-with-example-from-scratch/"&gt;Angular NGXS Tutorial With Example From Scratch&lt;/a&gt;. I needed to combine with &lt;a href="https://ngxs.gitbook.io/ngxs/getting-started/installation"&gt;Installation of ngxs.store&lt;/a&gt; for the installation.&lt;/p&gt;
&lt;h3&gt;Steps&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ng new ng6xs
&lt;span class="nb"&gt;cd&lt;/span&gt; ng6xs/
npm install @ngxs/store --save
npm install @ngxs/logger-plugin --save --dev
npm install @ngxs/devtools-plugin --save --dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then tried to serve but got an error. I solved it by updating to "rxjs": "6.3.3" in package.json. See &lt;a href="https://github.com/MarkPieszak/aspnetcore-angular-universal/issues/714"&gt;Issue&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ng serve -o
ng g c components/create --spec&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
ng g c components/index --spec&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
npm install bootstrap --save
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works like it should&lt;/p&gt;
&lt;p&gt;&lt;img src="https://appdividend.com/wp-content/uploads/2018/07/Angular-State-Management-Pattern.png" alt="state architecture" width="600"/&gt;&lt;/p&gt;
&lt;h2&gt;Quick question for my colleague&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I only see the Store imported in create.component.ts. Shouldn't it be imported and provided in the app.module.ts? Yes. But its imported and provided by&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgxsModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@ngxs/store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;imports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;NgxsModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="nx"&gt;UserState&lt;/span&gt;
    &lt;span class="p"&gt;]),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My colleague further more recommended to use&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en-US"&gt;redux-devtools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ngxs router plugin&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@azure/msal-angular"&gt;microsoft angular plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and to study&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/finiteloop-systems/architect-design-build-scalable-angular-applications-ce336a3c153a"&gt;Architect, design &amp;amp; build scalable Angular applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;https://medium.com/@ramandeep.singh.1983/project-structure-for-modern-angular-applications-d00036c9e1ee&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A second, more advanced example&lt;/h2&gt;
&lt;p&gt;https://github.com/tommythongnguyen/Ngxs-Pizza-Order&lt;/p&gt;
&lt;h2&gt;Questions for my colleague&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Why does 'schematics' create a XYZStateModule? In the style guide they don't mention StateModule. I would think they should be called XYZState.&lt;/li&gt;
&lt;li&gt;How do I create a 'StateModel that extends Array&lt;Model&gt;' so that I can refer to my list of Models as&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;state.models instead of state.XYZStateModule.models&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How do I update state of individual model install of state of array of models. It seems costly to me to update state of list of array in stead of individual array.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://medium.com/finiteloop-systems/architect-design-build-scalable-angular-applications-ce336a3c153a&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.angularindepth.com/container-components-with-angular-11e4200f8df"&gt;container-components-with-angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Angular"></category><category term="NGXS"></category><category term="State Management"></category></entry></feed>